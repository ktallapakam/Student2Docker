pipeline {
    agent any
    environment {
        IMAGE_NAME = 'devopskishore79/students'
    }

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World.....!'
            }
        }
        stage('checkout') {
            steps {
                echo 'Hello World.....checkout'
                git branch: 'main', credentialsId: 'githubCred', url: 'https://github.com/ktallapakam/Student2Docker.git'
            }
        }
        stage('gitBuild') {
            steps {
                echo 'Hello World.....checkout'
                sh 'mvn clean install'
            }
        }
        stage('dockerBuild') {
            steps {
                echo 'Hello World.....dockerBuild'
                sh 'docker build -t ${IMAGE_NAME} .'
            }
        }
        stage('dockerImageScan') {
            steps {
                echo 'Hello World.....dockerImageScan'
                sh 'trivy image ${IMAGE_NAME}:latest > report.txt'
            }
        }
        stage('dockerPush') {
            steps {
                echo 'Hello World.....dockerPush'
                withCredentials([string(credentialsId: 'dockerCred', variable: 'dockerHubCred')]) {
                    sh 'docker login -u devopskishore79 -p ${dockerHubCred}'
                }
                sh 'docker push ${IMAGE_NAME}'
                echo "${IMAGE_NAME} pushed to dockerHub"
            }
        }
        stage('Deploy') {
            steps {
                //not working, need to look into it..,
                //error: You must be logged in to the server (the server has asked for the client to provide credentials)
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'awsCred', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                     sh '''
                            echo $WORKSPACE
                            export KUBECONFIG=$WORKSPACE/kubeconfig
                            echo $KUBECONFIG
                            aws eks --region us-east-1 update-kubeconfig --name eks-cluster --kubeconfig $KUBECONFIG
                            kubectl --kubeconfig=$KUBECONFIG apply -f k8s/deployment.yaml
                            kubectl --kubeconfig=$KUBECONFIG apply -f k8s/servicves.yaml
                        '''
                }
            }
        }
    }
}